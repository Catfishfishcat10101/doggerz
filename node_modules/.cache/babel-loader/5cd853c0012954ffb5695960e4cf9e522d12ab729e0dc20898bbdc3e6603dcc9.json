{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fireb\\\\doggerz\\\\src\\\\components\\\\Features\\\\Dog.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport jackRussellSprite from '../../assets/sprites/jack_russell_directions.png';\nimport '../..//styles/Dog.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FRAME_WIDTH = 256; // each frame is 256px wide\nconst FRAME_HEIGHT = 256; // each row is 256px tall\nconst TOTAL_FRAMES = 4; // 4 frames per direction\nconst directions = ['right', 'left', 'down', 'up'];\nconst getDirectionRow = direction => {\n  switch (direction) {\n    case \"right\":\n      return 0;\n    case \"left\":\n      return 1;\n    case \"down\":\n      return 2;\n    case \"up\":\n      return 3;\n    default:\n      return 0;\n  }\n};\nconst Dog = () => {\n  _s();\n  const isWalking = useSelector(state => state.dog.isWalking);\n  const [frame, setFrame] = useState(0);\n  const [direction, setDirection] = useState(\"right\");\n  const [position, setPosition] = useState({\n    x: 100,\n    y: 100\n  });\n\n  //ANIMATE SPRITE FRAMES WHILE WALKING\n  useEffect(() => {\n    if (!isWalking) return;\n    const frameTimer = setInterval(() => {\n      setFrame(prev => (prev + 1) % TOTAL_FRAMES);\n      const dir = directions[Math.floor(Math.random() * directions.length)];\n      setDirection(dir);\n    }, 150);\n    return () => clearInterval(frameTimer);\n  }, [isWalking]);\n\n  //MOVE SPRITE ON SCREEN\n  useEffect(() => {\n    if (!isWalking) return;\n    const walkTimer = setInterval(() => {\n      setPosition(prev => {\n        const move = 20;\n        const maxX = window.innerWidth - FRAME_WIDTH;\n        const maxY = window.innerHeight - FRAME_HEIGHT;\n        let newX = prev.x;\n        let newY = prev.y;\n        if (direction === \"right\") newX += move;\n        if (direction === \"left\") newX -= move;\n        if (direction === \"up\") newY -= move;\n        if (direction === \"down\") newY += move;\n        return {\n          x: Math.max(0, Math.min(newX, maxX)),\n          y: Math.max(0, Math.min(newY, maxY))\n        };\n      });\n    }, 3000);\n    return () => clearInterval(walkTimer);\n  }, [isWalking, direction]);\n  const backgroundX = -frame * FRAME_WIDTH;\n  const backgroundY = -getDirectionRow(direction) * FRAME_HEIGHT;\n  const dogStyle = {\n    width: `${FRAME_WIDTH}px`,\n    height: `${FRAME_HEIGHT}px`,\n    backgroundImage: `url(${jackRussellSprite})`,\n    backgroundPoisition: `${backgroundX}px ${backgroundY}px`,\n    backgroundSize: \"1024px 1024px\",\n    position: \"absolute\",\n    top: position.y,\n    left: position.x,\n    imageRendering: \"pixelated\",\n    transition: \"top 1s linear, left 1s linear\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dog-sprite\",\n    style: dogStyle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 12\n  }, this);\n};\n_s(Dog, \"7FN1mwJYctWnllL9EuVspbhFruE=\", false, function () {\n  return [useSelector];\n});\n_c = Dog;\nexport default Dog;\nvar _c;\n$RefreshReg$(_c, \"Dog\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","jackRussellSprite","jsxDEV","_jsxDEV","FRAME_WIDTH","FRAME_HEIGHT","TOTAL_FRAMES","directions","getDirectionRow","direction","Dog","_s","isWalking","state","dog","frame","setFrame","setDirection","position","setPosition","x","y","frameTimer","setInterval","prev","dir","Math","floor","random","length","clearInterval","walkTimer","move","maxX","window","innerWidth","maxY","innerHeight","newX","newY","max","min","backgroundX","backgroundY","dogStyle","width","height","backgroundImage","backgroundPoisition","backgroundSize","top","left","imageRendering","transition","className","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/fireb/doggerz/src/components/Features/Dog.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport jackRussellSprite from '../../assets/sprites/jack_russell_directions.png';\r\nimport '../..//styles/Dog.css';\r\n\r\nconst FRAME_WIDTH = 256; // each frame is 256px wide\r\nconst FRAME_HEIGHT = 256; // each row is 256px tall\r\nconst TOTAL_FRAMES = 4; // 4 frames per direction\r\nconst directions = ['right', 'left', 'down', 'up'];\r\n\r\nconst getDirectionRow = (direction) => {\r\n    switch (direction) {\r\n        case \"right\": return 0;\r\n        case \"left\": return 1;\r\n        case \"down\": return 2;\r\n        case \"up\": return 3;\r\n        default: return 0;\r\n    }\r\n};\r\n\r\nconst Dog = () => {\r\n    const isWalking = useSelector((state) => state.dog.isWalking);\r\n    const [frame, setFrame] = useState(0);\r\n    const [direction, setDirection] = useState(\"right\");\r\n    const [position, setPosition] = useState({x: 100, y: 100});\r\n\r\n    //ANIMATE SPRITE FRAMES WHILE WALKING\r\n    useEffect(() => {\r\n        if(!isWalking) return;\r\n\r\n        const frameTimer = setInterval(() => {\r\n            setFrame((prev) =>(prev + 1) % TOTAL_FRAMES);\r\n             const dir = directions[Math.floor(Math.random() * directions.length)];\r\n             setDirection(dir);\r\n            }, 150);\r\n\r\n            return () => clearInterval(frameTimer);\r\n        }, [isWalking]);\r\n\r\n        //MOVE SPRITE ON SCREEN\r\n        useEffect(() => {\r\n            if(!isWalking) return;\r\n            const walkTimer = setInterval(() => {\r\n            setPosition((prev) => {\r\n                const move = 20;\r\n                const maxX = window.innerWidth - FRAME_WIDTH;\r\n                const maxY = window.innerHeight - FRAME_HEIGHT;\r\n                let newX = prev.x;\r\n                let newY = prev.y;\r\n\r\n                if (direction === \"right\") newX += move;\r\n                if (direction === \"left\") newX -= move;\r\n                if (direction === \"up\") newY -= move;\r\n                if (direction === \"down\") newY += move;\r\n\r\n                return {\r\n                    x:Math.max(0,Math.min(newX, maxX)),\r\n                    y:Math.max(0,Math.min(newY, maxY)),\r\n                };\r\n            });\r\n        }, 3000);\r\n\r\n        return () => clearInterval(walkTimer);\r\n    }, [isWalking, direction]);\r\n    \r\n    const backgroundX = -frame * FRAME_WIDTH;\r\n    const backgroundY = -getDirectionRow(direction) * FRAME_HEIGHT;\r\n\r\n    const dogStyle = {\r\n        width: `${FRAME_WIDTH}px`,\r\n        height: `${FRAME_HEIGHT}px`,\r\n        backgroundImage: `url(${jackRussellSprite})`,\r\n        backgroundPoisition: `${backgroundX}px ${backgroundY}px`,\r\n        backgroundSize: \"1024px 1024px\",\r\n        position: \"absolute\",\r\n        top: position.y,\r\n        left: position.x,\r\n        imageRendering: \"pixelated\",\r\n        transition: \"top 1s linear, left 1s linear\",\r\n    };\r\n\r\n    return <div className='dog-sprite' style={dogStyle}></div>;\r\n};\r\n\r\nexport default Dog;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}