rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // dogs collection: doc id MUST be the owner's UID
    match /dogs/{uid} {

      allow read: if isOwner(uid);

      allow create: if request.auth != null
        && request.auth.uid == uid
        && !exists(/databases/$(database)/documents/dogs/$(uid))
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.keys().hasOnly([
             'ownerId','name','stats','mood','createdAt','updatedAt',
             'pos','isPottyTrained','pottyLevel','poopCount','lastTrainedAt'
           ])
        && isValidNewDog();

      allow update: if isOwner(uid)
        && isValidDogUpdate();

      allow delete: if isOwner(uid);

      function isOwner(uid) {
        return request.auth != null
          && request.auth.uid == uid
          && (resource == null || resource.data.ownerId == request.auth.uid);
      }

      function isValidNewDog() {
        return request.resource.data.keys().hasAll(['ownerId','stats','mood','createdAt','updatedAt'])
          && request.resource.data.ownerId == request.auth.uid
          && isValidStats(request.resource.data.stats)
          && isValidMood(request.resource.data.mood)
          && (!('name' in request.resource.data) || isValidName(request.resource.data.name))
          && isValidTimestamps();
      }

      function isValidDogUpdate() {
        return request.auth != null
          && (resource.data.ownerId == request.auth.uid)
          && request.resource.data.ownerId == resource.data.ownerId
          && request.resource.data.keys().hasOnly([
            'ownerId','name','stats','mood','createdAt','updatedAt',
            'pos','isPottyTrained','pottyLevel','poopCount','lastTrainedAt'
          ])
          && (!('name' in request.resource.data) || isValidName(request.resource.data.name))
          && (!('mood' in request.resource.data) || isValidMood(request.resource.data.mood))
          && (!('stats' in request.resource.data) || isValidStats(request.resource.data.stats))
          && (!('pos' in request.resource.data) || isValidPos(request.resource.data.pos))
          && (!('isPottyTrained' in request.resource.data) || (request.resource.data.isPottyTrained is bool))
          && (!('pottyLevel' in request.resource.data) || isPercent(request.resource.data.pottyLevel))
          && (!('poopCount' in request.resource.data) || (request.resource.data.poopCount is int))
          && isValidTimestamps();
      }

      /* ---------- validators ---------- */

      function isValidStats(stats) {
        return stats is map
          && (!('hunger' in stats) || isPercent(stats.hunger))
          && (!('happiness' in stats) || isPercent(stats.happiness))
          && (!('energy' in stats) || isPercent(stats.energy))
          && (!('cleanliness' in stats) || isPercent(stats.cleanliness));
      }

      function isPercent(n) {
        return n is number && n >= 0 && n <= 100;
      }

      function isValidMood(m) {
        return m in ['idle','happy','sleep','sick','play','walk','bath'];
      }

      function isValidPos(pos) {
        return pos is map
          && (!('x' in pos) || (pos.x is number))
          && (!('y' in pos) || (pos.y is number));
      }

      function isValidName(n) {
        return n is string && n.size() >= 1 && n.size() <= 24 && n.trim().size() > 0;
      }

      function isValidTimestamps() {
        return (!('createdAt' in request.resource.data) || request.resource.data.createdAt is timestamp)
          && (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt is timestamp)
          && (!('lastTrainedAt' in request.resource.data) || request.resource.data.lastTrainedAt is timestamp);
      }
    }
  }
}
