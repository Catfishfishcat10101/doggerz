{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CATFISHFISHCAT\\\\doggerz\\\\doggerz-app\\\\src\\\\components\\\\Dog.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { move } from \"../redux/dogSlice\";\nimport barkSoundSrc from \"../assets/audio/bark.mp3\";\nimport poopSprite from \"../assets/sprites/poop.png\";\nimport dayBg from \"../assets/backgrounds/yard_day.png\";\nimport nightBg from \"../assets/backgrounds/yard_night.png\";\nimport dogSprite from \"../assets/sprites/jack_russell_directions.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dog = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const frameWidth = 64;\n  const frameHeight = 64;\n  const totalFrames = 4;\n  const canvasWidth = 256;\n  const canvasHeight = 256;\n  const dispatch = useDispatch();\n  const {\n    x,\n    y,\n    direction,\n    pottyTrained,\n    soundEnabled\n  } = useSelector(state => state.dog);\n  const directionMap = {\n    down: 0,\n    left: 1,\n    right: 2,\n    up: 3\n  };\n  const [frame, setFrame] = useState(0);\n  const [spriteLoaded, setSpriteLoaded] = useState(false);\n  const [bgLoaded, setBgLoaded] = useState(false);\n  const [background, setBackground] = useState(new Image());\n  const [sprite, setSprite] = useState(new Image());\n  const [poops, setPoops] = useState([]);\n  const barkAudio = useRef(new Audio(barkSoundSrc));\n\n  // Load sprite and background\n  useEffect(() => {\n    const s = new Image();\n    s.src = dogSprite;\n    s.onload = () => {\n      setSprite(s);\n      setSpriteLoaded(true);\n    };\n    const hour = new Date().getHours();\n    const bg = new Image();\n    bg.src = hour >= 7 && hour <= 19 ? dayBg : nightBg;\n    bg.onload = () => {\n      setBackground(bg);\n      setBgLoaded(true);\n    };\n  }, []);\n  const getRandomDirection = () => {\n    const directions = [\"up\", \"down\", \"left\", \"right\"];\n    return directions[Math.floor(Math.random() * directions.length)];\n  };\n  const moveDog = dir => {\n    const speed = 2;\n    let newX = x;\n    let newY = y;\n    if (dir === \"left\") newX = Math.max(0, x - speed);\n    if (dir === \"right\") newX = Math.min(canvasWidth - frameWidth, x + speed);\n    if (dir === \"up\") newY = Math.max(0, y - speed);\n    if (dir === \"down\") newY = Math.min(canvasHeight - frameHeight, y + speed);\n    dispatch(move({\n      x: newX,\n      y: newY,\n      direction: dir\n    }));\n  };\n\n  // Poop and bark loop\n  useEffect(() => {\n    const maybePoop = () => {\n      if (!pottyTrained && Math.random() < 0.15) {\n        setPoops(prev => [...prev, {\n          x,\n          y,\n          timestamp: Date.now()\n        }]);\n      }\n    };\n    const maybeBark = () => {\n      if (soundEnabled && Math.random() < 0.3) {\n        barkAudio.current.play();\n      }\n    };\n    const loop = setInterval(() => {\n      maybePoop();\n      maybeBark();\n    }, 3000);\n    return () => clearInterval(loop);\n  }, [x, y, pottyTrained, soundEnabled]);\n\n  // Clear old poops\n  useEffect(() => {\n    const cleanup = setInterval(() => {\n      setPoops(prev => prev.filter(p => Date.now() - p.timestamp < 8000));\n    }, 2000);\n    return () => clearInterval(cleanup);\n  }, []);\n\n  // Animation frame draw\n  useEffect(() => {\n    if (!spriteLoaded || !bgLoaded) return;\n    const ctx = canvasRef.current.getContext(\"2d\");\n    const draw = () => {\n      const row = directionMap[direction];\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.drawImage(background, 0, 0, canvasWidth, canvasHeight);\n      ctx.drawImage(sprite, frame * frameWidth, row * frameHeight, frameWidth, frameHeight, x, y, frameWidth, frameHeight);\n      // Draw poops\n      poops.forEach(({\n        x,\n        y\n      }) => {\n        const poopImg = new Image();\n        poopImg.src = poopSprite;\n        ctx.drawImage(poopImg, x + 10, y + 10, 24, 24);\n      });\n      setFrame(f => (f + 1) % totalFrames);\n    };\n    const interval = setInterval(draw, 200);\n    return () => clearInterval(interval);\n  }, [spriteLoaded, bgLoaded, frame, x, y, direction, poops]);\n\n  // Idle walking loop\n  useEffect(() => {\n    let isWalking = false;\n    let walkInterval;\n    let pauseTimeout;\n    const startIdleLoop = () => {\n      const loop = () => {\n        if (!isWalking) {\n          const dir = getRandomDirection();\n          isWalking = true;\n          walkInterval = setInterval(() => moveDog(dir), 100);\n          pauseTimeout = setTimeout(() => {\n            clearInterval(walkInterval);\n            isWalking = false;\n            setTimeout(loop, Math.random() * 3000 + 1000);\n          }, Math.random() * 1500 + 1000);\n        }\n      };\n      loop();\n    };\n    startIdleLoop();\n    return () => {\n      clearInterval(walkInterval);\n      clearTimeout(pauseTimeout);\n    };\n  }, [x, y]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      className: \"rounded border border-gray-700\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(Dog, \"xfYd3uJNEhSO3JwrxL+FX4XoiCY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Dog;\nexport default Dog;\nvar _c;\n$RefreshReg$(_c, \"Dog\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useSelector","useDispatch","move","barkSoundSrc","poopSprite","dayBg","nightBg","dogSprite","jsxDEV","_jsxDEV","Dog","_s","canvasRef","frameWidth","frameHeight","totalFrames","canvasWidth","canvasHeight","dispatch","x","y","direction","pottyTrained","soundEnabled","state","dog","directionMap","down","left","right","up","frame","setFrame","spriteLoaded","setSpriteLoaded","bgLoaded","setBgLoaded","background","setBackground","Image","sprite","setSprite","poops","setPoops","barkAudio","Audio","s","src","onload","hour","Date","getHours","bg","getRandomDirection","directions","Math","floor","random","length","moveDog","dir","speed","newX","newY","max","min","maybePoop","prev","timestamp","now","maybeBark","current","play","loop","setInterval","clearInterval","cleanup","filter","p","ctx","getContext","draw","row","clearRect","drawImage","forEach","poopImg","f","interval","isWalking","walkInterval","pauseTimeout","startIdleLoop","setTimeout","clearTimeout","className","children","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CATFISHFISHCAT/doggerz/doggerz-app/src/components/Dog.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { move } from \"../redux/dogSlice\";\r\nimport barkSoundSrc from \"../assets/audio/bark.mp3\";\r\nimport poopSprite from \"../assets/sprites/poop.png\";\r\nimport dayBg from \"../assets/backgrounds/yard_day.png\";\r\nimport nightBg from \"../assets/backgrounds/yard_night.png\";\r\nimport dogSprite from \"../assets/sprites/jack_russell_directions.png\";\r\n\r\nconst Dog = () => {\r\n  const canvasRef = useRef(null);\r\n  const frameWidth = 64;\r\n  const frameHeight = 64;\r\n  const totalFrames = 4;\r\n  const canvasWidth = 256;\r\n  const canvasHeight = 256;\r\n\r\n  const dispatch = useDispatch();\r\n  const { x, y, direction, pottyTrained, soundEnabled } = useSelector((state) => state.dog);\r\n  const directionMap = { down: 0, left: 1, right: 2, up: 3 };\r\n\r\n  const [frame, setFrame] = useState(0);\r\n  const [spriteLoaded, setSpriteLoaded] = useState(false);\r\n  const [bgLoaded, setBgLoaded] = useState(false);\r\n  const [background, setBackground] = useState(new Image());\r\n  const [sprite, setSprite] = useState(new Image());\r\n  const [poops, setPoops] = useState([]);\r\n  const barkAudio = useRef(new Audio(barkSoundSrc));\r\n\r\n  // Load sprite and background\r\n  useEffect(() => {\r\n    const s = new Image();\r\n    s.src = dogSprite;\r\n    s.onload = () => {\r\n      setSprite(s);\r\n      setSpriteLoaded(true);\r\n    };\r\n\r\n    const hour = new Date().getHours();\r\n    const bg = new Image();\r\n    bg.src = hour >= 7 && hour <= 19 ? dayBg : nightBg;\r\n    bg.onload = () => {\r\n      setBackground(bg);\r\n      setBgLoaded(true);\r\n    };\r\n  }, []);\r\n\r\n  const getRandomDirection = () => {\r\n    const directions = [\"up\", \"down\", \"left\", \"right\"];\r\n    return directions[Math.floor(Math.random() * directions.length)];\r\n  };\r\n\r\n  const moveDog = (dir) => {\r\n    const speed = 2;\r\n    let newX = x;\r\n    let newY = y;\r\n    if (dir === \"left\") newX = Math.max(0, x - speed);\r\n    if (dir === \"right\") newX = Math.min(canvasWidth - frameWidth, x + speed);\r\n    if (dir === \"up\") newY = Math.max(0, y - speed);\r\n    if (dir === \"down\") newY = Math.min(canvasHeight - frameHeight, y + speed);\r\n    dispatch(move({ x: newX, y: newY, direction: dir }));\r\n  };\r\n\r\n  // Poop and bark loop\r\n  useEffect(() => {\r\n    const maybePoop = () => {\r\n      if (!pottyTrained && Math.random() < 0.15) {\r\n        setPoops((prev) => [...prev, { x, y, timestamp: Date.now() }]);\r\n      }\r\n    };\r\n\r\n    const maybeBark = () => {\r\n      if (soundEnabled && Math.random() < 0.3) {\r\n        barkAudio.current.play();\r\n      }\r\n    };\r\n\r\n    const loop = setInterval(() => {\r\n      maybePoop();\r\n      maybeBark();\r\n    }, 3000);\r\n\r\n    return () => clearInterval(loop);\r\n  }, [x, y, pottyTrained, soundEnabled]);\r\n\r\n  // Clear old poops\r\n  useEffect(() => {\r\n    const cleanup = setInterval(() => {\r\n      setPoops((prev) => prev.filter((p) => Date.now() - p.timestamp < 8000));\r\n    }, 2000);\r\n    return () => clearInterval(cleanup);\r\n  }, []);\r\n\r\n  // Animation frame draw\r\n  useEffect(() => {\r\n    if (!spriteLoaded || !bgLoaded) return;\r\n    const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n    const draw = () => {\r\n      const row = directionMap[direction];\r\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n      ctx.drawImage(background, 0, 0, canvasWidth, canvasHeight);\r\n      ctx.drawImage(\r\n        sprite,\r\n        frame * frameWidth,\r\n        row * frameHeight,\r\n        frameWidth,\r\n        frameHeight,\r\n        x,\r\n        y,\r\n        frameWidth,\r\n        frameHeight\r\n      );\r\n      // Draw poops\r\n      poops.forEach(({ x, y }) => {\r\n        const poopImg = new Image();\r\n        poopImg.src = poopSprite;\r\n        ctx.drawImage(poopImg, x + 10, y + 10, 24, 24);\r\n      });\r\n\r\n      setFrame((f) => (f + 1) % totalFrames);\r\n    };\r\n\r\n    const interval = setInterval(draw, 200);\r\n    return () => clearInterval(interval);\r\n  }, [spriteLoaded, bgLoaded, frame, x, y, direction, poops]);\r\n\r\n  // Idle walking loop\r\n  useEffect(() => {\r\n    let isWalking = false;\r\n    let walkInterval;\r\n    let pauseTimeout;\r\n\r\n    const startIdleLoop = () => {\r\n      const loop = () => {\r\n        if (!isWalking) {\r\n          const dir = getRandomDirection();\r\n          isWalking = true;\r\n          walkInterval = setInterval(() => moveDog(dir), 100);\r\n          pauseTimeout = setTimeout(() => {\r\n            clearInterval(walkInterval);\r\n            isWalking = false;\r\n            setTimeout(loop, Math.random() * 3000 + 1000);\r\n          }, Math.random() * 1500 + 1000);\r\n        }\r\n      };\r\n      loop();\r\n    };\r\n\r\n    startIdleLoop();\r\n    return () => {\r\n      clearInterval(walkInterval);\r\n      clearTimeout(pauseTimeout);\r\n    };\r\n  }, [x, y]);\r\n\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        className=\"rounded border border-gray-700\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dog;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}