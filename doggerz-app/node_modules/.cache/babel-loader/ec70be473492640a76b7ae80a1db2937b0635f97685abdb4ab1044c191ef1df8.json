{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CATFISHFISHCAT\\\\doggerz\\\\doggerz-app\\\\src\\\\components\\\\Dog.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { move } from \"../redux/dogSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dog = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const sprite = new Image();\n  const background = new Image();\n  sprite.src = \"/assets/sprites/jack_russell_directions.png\";\n  background.src = \"/assets/backgrounds/yard.png\";\n  const frameWidth = 64;\n  const frameHeight = 64;\n  const totalFrames = 4;\n  const canvasWidth = 256;\n  const canvasHeight = 256;\n  const dispatch = useDispatch();\n  const {\n    x,\n    y,\n    direction\n  } = useSelector(state => state.dog);\n  const directionMap = {\n    down: 0,\n    left: 1,\n    right: 2,\n    up: 3\n  };\n  const [frame, setFrame] = useState(0);\n  const getRandomDirection = () => {\n    const directions = [\"up\", \"down\", \"left\", \"right\"];\n    return directions[Math.floor(Math.random() * directions.length)];\n  };\n  const moveDog = dir => {\n    const speed = 2;\n    let newX = x;\n    let newY = y;\n    if (dir === \"left\") newX = Math.max(0, x - speed);\n    if (dir === \"right\") newX = Math.min(canvasWidth - frameWidth, x + speed);\n    if (dir === \"up\") newY = Math.max(0, y - speed);\n    if (dir === \"down\") newY = Math.min(canvasHeight - frameHeight, y + speed);\n    dispatch(move({\n      x: newX,\n      y: newY,\n      direction: dir\n    }));\n  };\n\n  // Animate sprite\n  useEffect(() => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n    const animate = () => {\n      const row = directionMap[direction];\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n      // Draw background\n      ctx.drawImage(background, 0, 0, canvasWidth, canvasHeight);\n\n      // Draw dog sprite\n      ctx.drawImage(sprite, frame * frameWidth, row * frameHeight, frameWidth, frameHeight, x, y, frameWidth, frameHeight);\n      setFrame(prev => (prev + 1) % totalFrames);\n    };\n    const interval = setInterval(animate, 200);\n    return () => clearInterval(interval);\n  }, [frame, direction, x, y]);\n\n  // Idle walking loop\n  useEffect(() => {\n    let isWalking = false;\n    let walkInterval;\n    let pauseTimeout;\n    const startIdleLoop = () => {\n      const loop = () => {\n        if (!isWalking) {\n          const dir = getRandomDirection();\n          isWalking = true;\n          walkInterval = setInterval(() => moveDog(dir), 100);\n          pauseTimeout = setTimeout(() => {\n            clearInterval(walkInterval);\n            isWalking = false;\n            setTimeout(loop, Math.random() * 3000 + 1000); // pause 1–4 sec\n          }, Math.random() * 1500 + 1000); // walk 1–2.5 sec\n        }\n      };\n      loop();\n    };\n    startIdleLoop();\n    return () => {\n      clearInterval(walkInterval);\n      clearTimeout(pauseTimeout);\n    };\n  }, [x, y]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      className: \"rounded border border-gray-700\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(Dog, \"PXYebzT6NrsDjYjXcsbbhUb/oLg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Dog;\nexport default Dog;\nvar _c;\n$RefreshReg$(_c, \"Dog\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useSelector","useDispatch","move","jsxDEV","_jsxDEV","Dog","_s","canvasRef","sprite","Image","background","src","frameWidth","frameHeight","totalFrames","canvasWidth","canvasHeight","dispatch","x","y","direction","state","dog","directionMap","down","left","right","up","frame","setFrame","getRandomDirection","directions","Math","floor","random","length","moveDog","dir","speed","newX","newY","max","min","ctx","current","getContext","animate","row","clearRect","drawImage","prev","interval","setInterval","clearInterval","isWalking","walkInterval","pauseTimeout","startIdleLoop","loop","setTimeout","clearTimeout","className","children","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CATFISHFISHCAT/doggerz/doggerz-app/src/components/Dog.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { move } from \"../redux/dogSlice\";\r\n\r\nconst Dog = () => {\r\n  const canvasRef = useRef(null);\r\n  const sprite = new Image();\r\n  const background = new Image();\r\n\r\n  sprite.src = \"/assets/sprites/jack_russell_directions.png\";\r\n  background.src = \"/assets/backgrounds/yard.png\";\r\n\r\n  const frameWidth = 64;\r\n  const frameHeight = 64;\r\n  const totalFrames = 4;\r\n\r\n  const canvasWidth = 256;\r\n  const canvasHeight = 256;\r\n\r\n  const dispatch = useDispatch();\r\n  const { x, y, direction } = useSelector((state) => state.dog);\r\n\r\n  const directionMap = {\r\n    down: 0,\r\n    left: 1,\r\n    right: 2,\r\n    up: 3,\r\n  };\r\n\r\n  const [frame, setFrame] = useState(0);\r\n\r\n  const getRandomDirection = () => {\r\n    const directions = [\"up\", \"down\", \"left\", \"right\"];\r\n    return directions[Math.floor(Math.random() * directions.length)];\r\n  };\r\n\r\n  const moveDog = (dir) => {\r\n    const speed = 2;\r\n    let newX = x;\r\n    let newY = y;\r\n\r\n    if (dir === \"left\") newX = Math.max(0, x - speed);\r\n    if (dir === \"right\") newX = Math.min(canvasWidth - frameWidth, x + speed);\r\n    if (dir === \"up\") newY = Math.max(0, y - speed);\r\n    if (dir === \"down\") newY = Math.min(canvasHeight - frameHeight, y + speed);\r\n\r\n    dispatch(move({ x: newX, y: newY, direction: dir }));\r\n  };\r\n\r\n  // Animate sprite\r\n  useEffect(() => {\r\n    const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n    const animate = () => {\r\n      const row = directionMap[direction];\r\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n      // Draw background\r\n      ctx.drawImage(background, 0, 0, canvasWidth, canvasHeight);\r\n\r\n      // Draw dog sprite\r\n      ctx.drawImage(\r\n        sprite,\r\n        frame * frameWidth,\r\n        row * frameHeight,\r\n        frameWidth,\r\n        frameHeight,\r\n        x,\r\n        y,\r\n        frameWidth,\r\n        frameHeight\r\n      );\r\n\r\n      setFrame((prev) => (prev + 1) % totalFrames);\r\n    };\r\n\r\n    const interval = setInterval(animate, 200);\r\n    return () => clearInterval(interval);\r\n  }, [frame, direction, x, y]);\r\n\r\n  // Idle walking loop\r\n  useEffect(() => {\r\n    let isWalking = false;\r\n    let walkInterval;\r\n    let pauseTimeout;\r\n\r\n    const startIdleLoop = () => {\r\n      const loop = () => {\r\n        if (!isWalking) {\r\n          const dir = getRandomDirection();\r\n          isWalking = true;\r\n\r\n          walkInterval = setInterval(() => moveDog(dir), 100);\r\n\r\n          pauseTimeout = setTimeout(() => {\r\n            clearInterval(walkInterval);\r\n            isWalking = false;\r\n            setTimeout(loop, Math.random() * 3000 + 1000); // pause 1–4 sec\r\n          }, Math.random() * 1500 + 1000); // walk 1–2.5 sec\r\n        }\r\n      };\r\n      loop();\r\n    };\r\n\r\n    startIdleLoop();\r\n\r\n    return () => {\r\n      clearInterval(walkInterval);\r\n      clearTimeout(pauseTimeout);\r\n    };\r\n  }, [x, y]);\r\n\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        className=\"rounded border border-gray-700\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dog;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}