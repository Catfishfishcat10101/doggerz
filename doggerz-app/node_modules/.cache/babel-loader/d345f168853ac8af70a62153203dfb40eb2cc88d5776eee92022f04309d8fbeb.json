{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport dogReducer from \"./dogSlice\";\n\n// Load from localStorage (if it exists)\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"dogState\");\n    return serializedState ? JSON.parse(serializedState) : undefined;\n  } catch (err) {\n    console.error(\"Failed to load state from localStorage:\", err);\n    return undefined;\n  }\n};\n\n// Save to localStorage\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"dogState\", serializedState);\n  } catch (err) {\n    console.error(\"Failed to save state to localStorage:\", err);\n  }\n};\nconst store = configureStore({\n  reducer: {\n    dog: dogReducer\n  },\n  preloadedState: loadState() // Load state on app start\n});\n\n// Save to localStorage whenever the store updates\nstore.subscribe(() => {\n  saveState({\n    dog: store.getState().dog\n  });\n});\nexport default store;","map":{"version":3,"names":["configureStore","dogReducer","loadState","serializedState","localStorage","getItem","JSON","parse","undefined","err","console","error","saveState","state","stringify","setItem","store","reducer","dog","preloadedState","subscribe","getState"],"sources":["C:/Users/CATFISHFISHCAT/doggerz/doggerz-app/src/redux/store.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\nimport dogReducer from \"./dogSlice\";\r\n\r\n// Load from localStorage (if it exists)\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"dogState\");\r\n    return serializedState ? JSON.parse(serializedState) : undefined;\r\n  } catch (err) {\r\n    console.error(\"Failed to load state from localStorage:\", err);\r\n    return undefined;\r\n  }\r\n};\r\n\r\n// Save to localStorage\r\nconst saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"dogState\", serializedState);\r\n  } catch (err) {\r\n    console.error(\"Failed to save state to localStorage:\", err);\r\n  }\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    dog: dogReducer,\r\n  },\r\n  preloadedState: loadState(), // Load state on app start\r\n});\r\n\r\n// Save to localStorage whenever the store updates\r\nstore.subscribe(() => {\r\n  saveState({\r\n    dog: store.getState().dog,\r\n  });\r\n});\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,UAAU,MAAM,YAAY;;AAEnC;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,IAAI;IACF,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACxD,OAAOF,eAAe,GAAGG,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC,GAAGK,SAAS;EAClE,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEF,GAAG,CAAC;IAC7D,OAAOD,SAAS;EAClB;AACF,CAAC;;AAED;AACA,MAAMI,SAAS,GAAIC,KAAK,IAAK;EAC3B,IAAI;IACF,MAAMV,eAAe,GAAGG,IAAI,CAACQ,SAAS,CAACD,KAAK,CAAC;IAC7CT,YAAY,CAACW,OAAO,CAAC,UAAU,EAAEZ,eAAe,CAAC;EACnD,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEF,GAAG,CAAC;EAC7D;AACF,CAAC;AAED,MAAMO,KAAK,GAAGhB,cAAc,CAAC;EAC3BiB,OAAO,EAAE;IACPC,GAAG,EAAEjB;EACP,CAAC;EACDkB,cAAc,EAAEjB,SAAS,CAAC,CAAC,CAAE;AAC/B,CAAC,CAAC;;AAEF;AACAc,KAAK,CAACI,SAAS,CAAC,MAAM;EACpBR,SAAS,CAAC;IACRM,GAAG,EAAEF,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACH;EACxB,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}